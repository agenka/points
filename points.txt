from binance.client import Client
from binance.enums import *
import time

api_key = 'e754d4bc35aa41b88897f41a08336d08'
api_secret = '7758d3bb3bda4ebb8a97fa1a04337e7f'

client = Client(api_key, api_secret)

symbol = 'BTCUSDT'
quantity = 0.001  # Quantidade desejada de compra
buy_price = None  # Preço de compra inicial
stop_loss_percentage = 1  # Porcentagem de stop loss inicial

# Obter o preço atual do símbolo
def get_current_price():
    return float(client.get_symbol_ticker(symbol=symbol)['price'])

# Colocar uma ordem de compra de mercado
def place_buy_order():
    global buy_price
    buy_price = get_current_price()
    order = client.create_order(
        symbol=symbol,
        side=SIDE_BUY,
        type=ORDER_TYPE_MARKET,
        quantity=quantity
    )
    print("Ordem de compra colocada com sucesso. Preço de compra:", buy_price)

# Atualizar o stop loss
def update_stop_loss():
    global stop_loss_percentage
    current_price = get_current_price()
    new_stop_loss_price = buy_price * (1 + stop_loss_percentage / 100)
    if current_price > new_stop_loss_price:
        stop_loss_percentage += 1  # Aumenta o stop loss em 1% se o preço subir
        client.create_order(
            symbol=symbol,
            side=SIDE_SELL,
            type=ORDER_TYPE_STOP_LOSS,
            quantity=quantity,
            stopPrice=new_stop_loss_price
        )
        print("Stop loss atualizado para:", new_stop_loss_price)

# Loop principal
while True:
    update_stop_loss()
    time.sleep(60)  # Verificar o preço a cada 60 segundos